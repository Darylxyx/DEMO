{"version":3,"sources":["webpack:///./src/views/Map3d.vue?d17c","webpack:///./node_modules/core-js/library/fn/get-iterator.js","webpack:///./src/views/Map3d.vue?5fbe","webpack:///src/views/Map3d.vue","webpack:///./src/views/Map3d.vue?4e7d","webpack:///./src/views/Map3d.vue","webpack:///./node_modules/@babel/runtime-corejs2/core-js/get-iterator.js","webpack:///./node_modules/core-js/library/modules/core.get-iterator.js","webpack:///./node_modules/latlon-geohash/latlon-geohash.js"],"names":["_node_modules_mini_css_extract_plugin_dist_loader_js_ref_10_oneOf_1_0_node_modules_css_loader_index_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_less_loader_dist_cjs_js_ref_10_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Map3d_vue_vue_type_style_index_0_id_cc860a3a_lang_less_scoped_true___WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_10_oneOf_1_0_node_modules_css_loader_index_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_less_loader_dist_cjs_js_ref_10_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Map3d_vue_vue_type_style_index_0_id_cc860a3a_lang_less_scoped_true___WEBPACK_IMPORTED_MODULE_0___default","n","module","exports","render","_vm","this","_h","$createElement","_c","_self","staticClass","ref","attrs","id","staticRenderFns","THREE","window","TWEEN","PI","Math","radius","mainGroup","Clock","Group","lineGroup","sphereGroup","globalGroup","pointsGroup","scanGroup","pathGroup","Map3dvue_type_script_lang_js_","mixins","threeMixin","math","data","runCount","stopCount","offlineCount","isLoading","methods","queryData","_this2","fetch","axios_default","a","create","method","url","then","_ref","Object","asyncToGenerator","regeneratorRuntime","mark","_callee","res","run","silence","offline","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","obj","coord","lglt","randomSort","dataSlice","dataMap","pointsAnimateStart","wrap","_context","prev","next","children","forEach","cloudGroup","cloud","tween","start","target","slice","floor","length","diff","random","undefined","get_iterator_default","done","value","geoHashKey","latlon_geohash_default","decode","lon","lat","t0","push","abrupt","t1","return","finish","sort","type","color","rgbcolor","twinkle","drawTruck","result","topLine100","addPath","stop","_x","apply","arguments","_this3","promise_default","resolve","promises","map","item","pro","solve","add","drawPoints","all","initWebGL","_this$initBasics","initBasics","$refs","canvas","position","x","y","z","antialias","clearColor","scene","camera","renderer","lookAt","v3","addLight","addSphere","addBackground","initMap","renderScene","update","requestAnimationFrame","_this4","boundary","province","drawMap","name","addAxes","axes","initAxes","lightGroup","ambientLight","initLight","directionalLight","shadow","near","far","left","right","top","bottom","addControl","control","initControls","rotateSpeed","zoomSpeed","panSpeed","_addSphere","_callee2","geom","_ref5","mat","sphere","_context2","initGeometry","e","t","bind","sent","default","loadTexture","initMaterial","Mesh","scale","set","rotation","globalAnimate","onUpdate","tween1","Tween","to","tween2","chain","addScanLine","i","LineBasicMaterial","opacity","transparent","scanLine","Line","scanAnimate","backGroup","geo","Geometry","j","particle","vertices","stars","createPoints","bindTwinkle","inTime","outTime","duration","delay","pointsArr","_this5","pList","point","indexOf","split","lng","Number","_this5$lglt2xyx","lglt2xyx","lineColor","linewidth","line","initLine","pData","_this6","pointSize","mapParam","splice","params","size","depthTest","splitCount","splitArr","splitArray","arr","points","p","_this6$lglt2xyx","_this6$lglt2xyx2","_this7","path","rank","list","drawPath","lineGeom","lineMat","drawPathFlow","frag","round","pointsGeom","_this","initData","index","I","_i","geometry","verticesNeedUpdate","onComplete","repeat","Infinity","initGUI","_this8","gui","dat_gui_module","controls","cameraX","cameraY","cameraZ","lookX","lookY","lookZ","fogFar","onChange","fog","Fog","mounted","views_Map3dvue_type_script_lang_js_","component","componentNormalizer","__webpack_exports__","anObject","get","getIterator","it","iterFn","TypeError","call","Geohash","base32","encode","precision","hash","posn","isNaN","Error","idx","bit","evenBit","geohash","latMin","latMax","lonMin","lonMax","lonMid","latMid","charAt","bounds","sw","ne","toFixed","log","LN10","toLowerCase","chr","bitN","adjacent","direction","neighbour","s","w","border","lastCh","parent","neighbours","se","nw"],"mappings":"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","file":"js/chunk-1a9c76cd.e2672596.js","sourcesContent":["import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-oneOf-1-0!../../node_modules/css-loader/index.js??ref--10-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--10-oneOf-1-2!../../node_modules/less-loader/dist/cjs.js??ref--10-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Map3d.vue?vue&type=style&index=0&id=cc860a3a&lang=less&scoped=true&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-oneOf-1-0!../../node_modules/css-loader/index.js??ref--10-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--10-oneOf-1-2!../../node_modules/less-loader/dist/cjs.js??ref--10-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Map3d.vue?vue&type=style&index=0&id=cc860a3a&lang=less&scoped=true&\"","require('../modules/web.dom.iterable');\nrequire('../modules/es6.string.iterator');\nmodule.exports = require('../modules/core.get-iterator');\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"container\"},[_c('div',{ref:\"stats\"}),_c('div',{ref:\"canvas\",attrs:{\"id\":\"WebGL-output\"}})])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <div class=\"container\">\n        <div ref='stats'></div>\n        <div ref='canvas' id='WebGL-output'></div>\n    </div>\n</template>\n<script>\nimport axios from 'axios';\nimport Geohash from 'latlon-geohash';\nimport { GUI } from 'dat.gui';\nimport mixin from '@/mixins/threeMixin';\nimport math from '@/mixins/math';\nimport boundaryJSON from '@/assets/js/boundary';\n\nconst THREE = window.THREE;\nconst TWEEN = window.TWEEN;\nconst PI = Math.PI;\nconst radius = 100;\nlet globalDirec = true;\nconst clock = new THREE.Clock();\n\nconst mainGroup = new THREE.Group(); // 顶级组\nconst lineGroup = new THREE.Group(); // 地图边界线组\nconst sphereGroup = new THREE.Group(); // 地球组\nconst globalGroup = new THREE.Group();\nconst pointsGroup = new THREE.Group(); // 车辆坐标点组\nconst scanGroup = new THREE.Group(); // 扫描线组\nconst pathGroup = new THREE.Group(); // 路径组\nexport default {\n    mixins: [mixin, math],\n    data() {\n        return {\n            runCount: 0,\n            stopCount: 0,\n            offlineCount: 0,\n            isLoading: false,\n        };\n    },\n    methods: {\n        queryData() {\n            this.isLoading = true;\n            // 查询车辆信息\n            const fetch = axios.create();\n            fetch({\n                method: 'get',\n                url: '/js/car.json',\n                data: {},\n            }).then(async (res) => {\n                let run = [];\n                let silence = [];\n                let offline = [];\n                res = res.data;\n                for (const obj of res) {\n                    if (obj.geoHashKey) {\n                        const coord = Geohash.decode(obj.geoHashKey);\n                        const lglt = [coord.lon, coord.lat];\n                        switch (obj.value) {\n                            case 2:\n                                run.push(lglt);\n                                break;\n                            case 1:\n                                silence.push(lglt);\n                                break;\n                            // case 0:\n                            //     offline.push(lglt);\n                            //     break;\n                            default:\n                                offline.push(lglt);\n                                break;\n                        }\n                    }\n                }\n                this.runCount = run.length;\n                this.stopCount = silence.length;\n                function randomSort() {\n                    const diff = Math.random() - Math.random();\n                    return diff;\n                }\n                function dataSlice(target) {\n                    return target.slice(0, Math.floor(target.length / 7));\n                }\n                run.sort(randomSort);\n                silence.sort(randomSort);\n                offline.sort(randomSort);\n                run = dataSlice(run);\n                silence = dataSlice(silence);\n                offline = dataSlice(offline);\n                const dataMap = [{\n                    type: 'run',\n                    data: run,\n                    color: 0x19D190,\n                    rgbcolor: 'rgba(25,209,144,1)',\n                    twinkle: true,\n                }, {\n                    type: 'silence',\n                    data: silence,\n                    color: 0x2934CE,\n                    rgbcolor: 'rgba(41,52,206,1)',\n                }, {\n                    type: 'offline',\n                    data: offline,\n                    color: 0x303A61,\n                    rgbcolor: 'rgba(48,58,97,1)',\n                }];\n\n                await this.drawTruck(dataMap);\n                function pointsAnimateStart() {\n                    pointsGroup.children.forEach((cloudGroup) => {\n                        cloudGroup.children.forEach((cloud) => {\n                            if (cloud.tween) cloud.tween.start();\n                        });\n                    });\n                }\n                pointsAnimateStart();\n\n                // 查询线路信息\n                const fetch = axios.create();\n                fetch({\n                    method: 'get',\n                    url: '/js/path.json',\n                    data: {},\n                }).then((result) => {\n                    // console.log(result);\n                    result = result.data.data.topLine100.slice(0, 300);\n                    this.addPath(result);\n                });\n            });\n        },\n        drawTruck(dataMap) {\n            return new Promise((resolve) => {\n                const promises = dataMap.map((item) => {\n                    const pro = new Promise((solve) => {\n                        pointsGroup.add(this.drawPoints(item));\n                        solve();\n                    });\n                    return pro;\n                });\n                Promise.all(promises).then(() => {\n                    resolve();\n                });\n            });\n        },\n        initWebGL() {\n            const {\n                scene,\n                camera,\n                renderer,\n            } = this.initBasics(this.$refs.canvas, { position: { x: -45, y: 62, z: -140 }, antialias: true }, { clearColor: 0x000000 });\n            this.scene = scene;\n            this.camera = camera;\n            this.renderer = renderer;\n            this.scene.add(mainGroup);\n            camera.lookAt(this.v3(64, 20, 150));\n\n            // scene.fog = new THREE.Fog(0x000000, 0.015, 1000);\n\n            // const stats = this.initStats(this.$refs.stats);\n            // const control = this.addControl();\n            // console.log(clock);\n\n            // this.addAxes();\n\n            this.addLight(); // 光源\n\n            this.addSphere(); // 地球\n\n            // this.addScanLine(); // 扫描线\n            this.addBackground(); // 星空背景\n\n            this.initMap(); // 绘制地图\n\n            // this.initGUI();\n            const renderScene = () => {\n                // stats.update();\n                // const delta = clock.getDelta();\n                // control.update(delta);\n                // this.scanAnimate();\n                TWEEN.update();\n                requestAnimationFrame(renderScene);\n                renderer.render(scene, camera);\n            };\n            renderScene();\n        },\n        initMap() {\n            globalGroup.add(lineGroup);\n            globalGroup.add(pointsGroup);\n            mainGroup.add(globalGroup);\n            boundaryJSON.forEach((province) => {\n                lineGroup.add(this.drawMap(province.name, province.data));\n            });\n        },\n        addAxes() {\n            const axes = this.initAxes(150);\n            mainGroup.add(axes);\n        },\n        addLight() { // 光源\n            const lightGroup = new THREE.Group();\n            const ambientLight = this.initLight('Ambient', {\n                color: 0x696969,\n            });\n            const directionalLight = this.initLight('Directional', {\n                color: 0xffffff,\n                position: { x: -500, y: 250, z: -100 },\n                shadow: {\n                    camera: {\n                        near: 2,\n                        far: radius * 2.5,\n                        left: -radius * 2,\n                        right: radius * 2,\n                        top: radius * 2,\n                        bottom: -radius * 2,\n                    },\n                },\n            });\n            // const helper = new THREE.CameraHelper(directionalLight.shadow.camera);\n            // lightGroup.add(helper);\n            lightGroup.add(ambientLight);\n            lightGroup.add(directionalLight);\n            mainGroup.add(lightGroup);\n        },\n        addControl() {\n            const control = this.initControls('Trackball', this.camera, {\n                rotateSpeed: 1.0,\n                zoomSpeed: 1.0,\n                panSpeed: 1.0,\n            });\n            return control;\n        },\n        async addSphere() { // 球\n            const geom = this.initGeometry('Sphere', radius, 40, 40);\n            const { default: url } = await import('@/assets/imgs/world.png');\n            const map = this.loadTexture(url);\n            const mat = this.initMaterial('MeshPhong', { color: 0x192452 }); //0x192452\n            mat.map = map;\n            const sphere = new THREE.Mesh(geom, mat);\n            sphere.scale.set(-1, -1, -1);\n            sphere.rotation.y = PI;\n            sphereGroup.add(sphere);\n            globalGroup.add(sphereGroup);\n        },\n        globalAnimate() {\n            const obj = { y: 0 };\n            function onUpdate(obj) {\n                globalGroup.rotation.y = obj.y;\n            }\n            const tween1 = new TWEEN.Tween(obj)\n                .to({ y: 0.1 }, 20000)\n                .onUpdate(onUpdate);\n            const tween2 = new TWEEN.Tween(obj)\n                .to({ y: -0.1 }, 20000)\n                .onUpdate(onUpdate);\n            tween1.chain(tween2);\n            tween2.chain(tween1);\n            tween1.start();\n        },\n        addScanLine() {\n            for (let i = 0; i < 8; i++) {\n                const geom = this.initGeometry('Circle', radius + 0.2, 40, 0, PI);\n                const mat = new THREE.LineBasicMaterial({\n                    color: 0xF5F5F5,\n                    opacity: i / 14,\n                    transparent: true,\n                });\n                const scanLine = new THREE.Line(geom, mat);\n                scanLine.rotation.x += i * 0.02;\n                scanGroup.add(scanLine);\n            }\n            mainGroup.add(scanGroup);\n        },\n        scanAnimate() {\n            scanGroup.rotation.x += 0.02;\n            if (scanGroup.rotation.x >= PI * 2) scanGroup.rotation.x = 0;\n        },\n        addBackground() {\n            const backGroup = new THREE.Group();\n            for (let i = 0; i < 10; i++) {\n                const geo = new THREE.Geometry();\n                for (let j = 0; j < 100; j++) {\n                    const x = Math.random() * 600 - 300;\n                    const y = Math.random() * 400 - 200;\n                    const z = 100;\n                    const particle = this.v3(x, y, z);\n                    geo.vertices.push(particle);\n                }\n                const stars = this.createPoints(geo, { map: null, color: 0xffffff });\n                this.bindTwinkle(stars, {\n                    inTime: 1000,\n                    outTime: 1000,\n                    duration: 3000,\n                    delay: Math.floor(Math.random() * 1000),\n                });\n                stars.tween.start();\n                backGroup.add(stars);\n            }\n            backGroup.rotation.y = PI / 9;\n            mainGroup.add(backGroup);\n        },\n        drawMap(name, pointsArr) {\n            const pList = [];\n            pointsArr.forEach((point) => {\n                if (point.indexOf(', ') > -1) {\n                    point = point.split(', ');\n                } else {\n                    point = point.split(',');\n                }\n                const lng = Number(point[0]);\n                const lat = point[1];\n                const { x, y, z } = this.lglt2xyx(lng + 90, lat, radius);\n                const particle = this.v3(x, y, z);\n                pList.push(particle);\n            });\n            let lineColor = 0x145385;\n            let linewidth = 1;\n            // if (name === '中国' || name === '台湾省') { // 轮廓加粗\n            //     lineColor = 0x6EFFFF;\n            //     linewidth = 1;\n            // }\n            const line = this.initLine(pList, {\n                color: lineColor,\n                linewidth,\n                transparent: true,\n                opacity: 0.6,\n            });\n            return line;\n        },\n        drawPoints(pData) { // 绘制车辆点\n            const cloudGroup = new THREE.Group();\n            let pointSize = 0.15;\n            const mapParam = [{\n                pro: 0,\n                color: pData.rgbcolor,\n            }, {\n                pro: 0.8,\n                color: pData.rgbcolor,\n            }, {\n                pro: 1,\n                color: 'rgba(0, 0, 0, 1)',\n            }];\n            if (pData.type === 'run') { // 运行的车辆增加光晕效果\n                pointSize = 0.3;\n                mapParam.splice(2, 0, { pro: 0.81, color: 'rgba(255,255,224, 1)' });\n            }\n            // console.log(mapParam);\n            const params = {\n                size: pointSize,\n                depthTest: false,\n            };\n            if (pData.twinkle) { // 车辆是否需要闪烁\n                const splitCount = 100; // 用于分组，实现闪烁效果\n                const splitArr = this.splitArray(pData.data, splitCount);\n                splitArr.forEach((arr) => {\n                    const points = new THREE.Geometry();\n                    arr.forEach((p) => {\n                        const { x, y, z } = this.lglt2xyx(p[0] + 90, p[1], radius);\n                        const particle = this.v3(x, y, z);\n                        points.vertices.push(particle);\n                    });\n                    const cloud = this.createPoints(points, params, mapParam);\n                    this.bindTwinkle(cloud);\n                    cloudGroup.add(cloud);\n                });\n            } else {\n                const points = new THREE.Geometry();\n                pData.data.forEach((p) => {\n                    const { x, y, z } = this.lglt2xyx(p[0] + 90, p[1], radius);\n                    const particle = this.v3(x, y, z);\n                    points.vertices.push(particle);\n                });\n                const cloud = this.createPoints(points, params, mapParam);\n                cloudGroup.add(cloud);\n            }\n            return cloudGroup;\n        },\n        addPath(data) {\n            data.forEach((path, rank) => {\n                const points = path.points.split(';');\n                const list = points.map((p) => {\n                    p = p.split(',');\n                    const lng = Number(p[0]);\n                    const lat = p[1];\n                    const result = this.lglt2xyx(lng + 90, lat, radius + 0.1);\n                    return result;\n                });\n                this.drawPath(list, rank);\n            });\n        },\n        drawPath(list, rank) { // 绘制线路\n            const lineGeom = new THREE.Geometry();\n            list.forEach((p) => {\n                lineGeom.vertices.push(p);\n            });\n            const lineMat = new THREE.LineBasicMaterial({\n                color: 0xFFD700,\n                opacity: 0.2,\n                transparent: true,\n            });\n            const line = new THREE.Line(lineGeom, lineMat);\n            pathGroup.add(line);\n            this.drawPathFlow(list, rank);\n            globalGroup.add(pathGroup);\n        },\n        drawPathFlow(list, rank) { // 线路流动效果\n            const length = list.length;\n            const frag = Math.round(list.length / 5);\n            const pointsGeom = new THREE.Geometry(); // 线路轨迹动画点\n            for (let i = 0; i < frag; i++) {\n                pointsGeom.vertices.push(this.v3(0, 0, 0));\n            }\n            const mapParam = [{\n                pro: 0,\n                color: 'rgba(255,215,0,1)',\n            }, {\n                pro: 0.9,\n                color: 'rgba(255,255,255,0.5)',\n            }, {\n                pro: 1,\n                color: 'rgba(0,0,0,1)',\n            }];\n            let pointSize = 0.2;\n            if (rank < 50) {\n                pointSize = 0.3;\n            } else if (rank >= 50 && rank < 200) {\n                pointSize = 0.25;\n            }\n            const points = this.createPoints(pointsGeom, {\n                color: 0xffffff,\n                size: pointSize,\n                depthTest: false,\n            }, mapParam);\n\n            const _this = this;\n            const initData = { index: 0 };\n            function onUpdate(obj) {\n                const I = Math.floor(obj.index);\n                const vertices = [];\n                for (let i = I; i > I - frag; i--) {\n                    if (list[i]) {\n                        vertices.push(list[i]);\n                    } else {\n                        vertices.push(_this.v3(500, 500, 500));\n                    }\n                }\n                points.geometry.vertices = vertices;\n                points.geometry.verticesNeedUpdate = true;\n            }\n            function onComplete() {\n                initData.index = 0;\n            }\n            const duration = 2000;\n            const delay = Math.floor(Math.random() * duration * 2);\n            // const delay = duration / 2;\n            const tween = new TWEEN.Tween(initData)\n                .to({ index: length + frag }, duration)\n                .delay(delay)\n                .onUpdate(onUpdate)\n                .onComplete(onComplete)\n                .repeat(Infinity);\n            pathGroup.add(points);\n            tween.start();\n\n            this.globalAnimate();\n        },\n        initGUI() {\n            const gui = new GUI();\n            const controls = {\n                cameraX: this.camera.position.x,\n                cameraY: this.camera.position.y,\n                cameraZ: this.camera.position.z,\n                lookX: 64,\n                lookY: 20,\n                lookZ: 150,\n                fogFar: 300,\n            };\n            let x = controls.lookX;\n            let y = controls.lookY;\n            let z = controls.lookZ;\n            const lookAt = () => {\n                this.camera.lookAt(this.v3(x, y, z));\n            };\n            gui.add(controls, 'cameraX', -200, 200).onChange((e) => {\n                this.camera.position.x = e;\n            });\n            gui.add(controls, 'cameraY', -200, 200).onChange((e) => {\n                this.camera.position.y = e;\n            });\n            gui.add(controls, 'cameraZ', -200, 200).onChange((e) => {\n                this.camera.position.z = e;\n            });\n            gui.add(controls, 'lookX', -200, 200).onChange((e) => {\n                x = e;\n                lookAt();\n            });\n            gui.add(controls, 'lookY', -200, 200).onChange((e) => {\n                y = e;\n                lookAt();\n            });\n            gui.add(controls, 'lookZ', -200, 200).onChange((e) => {\n                z = e;\n                lookAt();\n            });\n            gui.add(controls, 'fogFar', 0, 2000).onChange((e) => {\n                this.scene.fog = new THREE.Fog(0xffffff, 0.015, e);\n            });\n        },\n    },\n    mounted() {\n        this.initWebGL();\n        this.queryData();\n    },\n};\n</script>\n<style lang='less' scoped>\n.container {\n    position: relative;\n    width: 100%;\n    height: 100%;\n\n    #WebGL-output {\n        overflow: hidden;\n        width: 100%;\n        height: 100%;\n    }\n\n    .map-bar{\n        position: absolute;\n        width: 100%;\n        height: .86rem;\n        display:flex;\n        justify-content: center;\n        align-items: center;\n        top:0;\n        .truck-status{\n            font-size: .18rem;\n            color: #7782AC;\n            margin-right: .7rem;\n            .icon{\n                margin-top: .19rem;\n                width: .18rem;\n                height: .18rem;\n                float: left;\n                margin-right: .1rem;\n                border-radius: 50%;\n                &.moving{\n                    background-image: linear-gradient(-180deg, #19D190 0%, #0D8477 100%);\n                }\n                &.stop{\n                    background-image: linear-gradient(45deg, #2934CE 0%, #86B0FF 100%);\n                }\n                &.offline{\n                    background-image: linear-gradient(45deg, #303A61 0%, #64709F 100%);\n                }\n            }\n            .num{\n                font-size: .32rem;\n                margin-left: .1rem;\n                color: #C7CFEE;\n            }\n        }\n    }\n}\n</style>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Map3d.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Map3d.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Map3d.vue?vue&type=template&id=cc860a3a&scoped=true&\"\nimport script from \"./Map3d.vue?vue&type=script&lang=js&\"\nexport * from \"./Map3d.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Map3d.vue?vue&type=style&index=0&id=cc860a3a&lang=less&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"cc860a3a\",\n  null\n  \n)\n\nexport default component.exports","module.exports = require(\"core-js/library/fn/get-iterator\");","var anObject = require('./_an-object');\nvar get = require('./core.get-iterator-method');\nmodule.exports = require('./_core').getIterator = function (it) {\n  var iterFn = get(it);\n  if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');\n  return anObject(iterFn.call(it));\n};\n","/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/* Geohash encoding/decoding and associated functions   (c) Chris Veness 2014-2016 / MIT Licence  */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\n'use strict';\n\n\n/**\n * Geohash encode, decode, bounds, neighbours.\n *\n * @namespace\n */\nvar Geohash = {};\n\n/* (Geohash-specific) Base32 map */\nGeohash.base32 = '0123456789bcdefghjkmnpqrstuvwxyz';\n\n/**\n * Encodes latitude/longitude to geohash, either to specified precision or to automatically\n * evaluated precision.\n *\n * @param   {number} lat - Latitude in degrees.\n * @param   {number} lon - Longitude in degrees.\n * @param   {number} [precision] - Number of characters in resulting geohash.\n * @returns {string} Geohash of supplied latitude/longitude.\n * @throws  Invalid geohash.\n *\n * @example\n *     var geohash = Geohash.encode(52.205, 0.119, 7); // geohash: 'u120fxw'\n */\nGeohash.encode = function(lat, lon, precision) {\n    // infer precision?\n    if (typeof precision == 'undefined') {\n        // refine geohash until it matches precision of supplied lat/lon\n        for (var p=1; p<=12; p++) {\n            var hash = Geohash.encode(lat, lon, p);\n            var posn = Geohash.decode(hash);\n            if (posn.lat==lat && posn.lon==lon) return hash;\n        }\n        precision = 12; // set to maximum\n    }\n\n    lat = Number(lat);\n    lon = Number(lon);\n    precision = Number(precision);\n\n    if (isNaN(lat) || isNaN(lon) || isNaN(precision)) throw new Error('Invalid geohash');\n\n    var idx = 0; // index into base32 map\n    var bit = 0; // each char holds 5 bits\n    var evenBit = true;\n    var geohash = '';\n\n    var latMin =  -90, latMax =  90;\n    var lonMin = -180, lonMax = 180;\n\n    while (geohash.length < precision) {\n        if (evenBit) {\n            // bisect E-W longitude\n            var lonMid = (lonMin + lonMax) / 2;\n            if (lon >= lonMid) {\n                idx = idx*2 + 1;\n                lonMin = lonMid;\n            } else {\n                idx = idx*2;\n                lonMax = lonMid;\n            }\n        } else {\n            // bisect N-S latitude\n            var latMid = (latMin + latMax) / 2;\n            if (lat >= latMid) {\n                idx = idx*2 + 1;\n                latMin = latMid;\n            } else {\n                idx = idx*2;\n                latMax = latMid;\n            }\n        }\n        evenBit = !evenBit;\n\n        if (++bit == 5) {\n            // 5 bits gives us a character: append it and start over\n            geohash += Geohash.base32.charAt(idx);\n            bit = 0;\n            idx = 0;\n        }\n    }\n\n    return geohash;\n};\n\n\n/**\n * Decode geohash to latitude/longitude (location is approximate centre of geohash cell,\n *     to reasonable precision).\n *\n * @param   {string} geohash - Geohash string to be converted to latitude/longitude.\n * @returns {{lat:number, lon:number}} (Center of) geohashed location.\n * @throws  Invalid geohash.\n *\n * @example\n *     var latlon = Geohash.decode('u120fxw'); // latlon: { lat: 52.205, lon: 0.1188 }\n */\nGeohash.decode = function(geohash) {\n\n    var bounds = Geohash.bounds(geohash); // <-- the hard work\n    // now just determine the centre of the cell...\n\n    var latMin = bounds.sw.lat, lonMin = bounds.sw.lon;\n    var latMax = bounds.ne.lat, lonMax = bounds.ne.lon;\n\n    // cell centre\n    var lat = (latMin + latMax)/2;\n    var lon = (lonMin + lonMax)/2;\n\n    // round to close to centre without excessive precision: ⌊2-log10(Δ°)⌋ decimal places\n    lat = lat.toFixed(Math.floor(2-Math.log(latMax-latMin)/Math.LN10));\n    lon = lon.toFixed(Math.floor(2-Math.log(lonMax-lonMin)/Math.LN10));\n\n    return { lat: Number(lat), lon: Number(lon) };\n};\n\n\n/**\n * Returns SW/NE latitude/longitude bounds of specified geohash.\n *\n * @param   {string} geohash - Cell that bounds are required of.\n * @returns {{sw: {lat: number, lon: number}, ne: {lat: number, lon: number}}}\n * @throws  Invalid geohash.\n */\nGeohash.bounds = function(geohash) {\n    if (geohash.length === 0) throw new Error('Invalid geohash');\n\n    geohash = geohash.toLowerCase();\n\n    var evenBit = true;\n    var latMin =  -90, latMax =  90;\n    var lonMin = -180, lonMax = 180;\n\n    for (var i=0; i<geohash.length; i++) {\n        var chr = geohash.charAt(i);\n        var idx = Geohash.base32.indexOf(chr);\n        if (idx == -1) throw new Error('Invalid geohash');\n\n        for (var n=4; n>=0; n--) {\n            var bitN = idx >> n & 1;\n            if (evenBit) {\n                // longitude\n                var lonMid = (lonMin+lonMax) / 2;\n                if (bitN == 1) {\n                    lonMin = lonMid;\n                } else {\n                    lonMax = lonMid;\n                }\n            } else {\n                // latitude\n                var latMid = (latMin+latMax) / 2;\n                if (bitN == 1) {\n                    latMin = latMid;\n                } else {\n                    latMax = latMid;\n                }\n            }\n            evenBit = !evenBit;\n        }\n    }\n\n    var bounds = {\n        sw: { lat: latMin, lon: lonMin },\n        ne: { lat: latMax, lon: lonMax },\n    };\n\n    return bounds;\n};\n\n\n/**\n * Determines adjacent cell in given direction.\n *\n * @param   geohash - Cell to which adjacent cell is required.\n * @param   direction - Direction from geohash (N/S/E/W).\n * @returns {string} Geocode of adjacent cell.\n * @throws  Invalid geohash.\n */\nGeohash.adjacent = function(geohash, direction) {\n    // based on github.com/davetroy/geohash-js\n\n    geohash = geohash.toLowerCase();\n    direction = direction.toLowerCase();\n\n    if (geohash.length === 0) throw new Error('Invalid geohash');\n    if ('nsew'.indexOf(direction) == -1) throw new Error('Invalid direction');\n\n    var neighbour = {\n        n: [ 'p0r21436x8zb9dcf5h7kjnmqesgutwvy', 'bc01fg45238967deuvhjyznpkmstqrwx' ],\n        s: [ '14365h7k9dcfesgujnmqp0r2twvyx8zb', '238967debc01fg45kmstqrwxuvhjyznp' ],\n        e: [ 'bc01fg45238967deuvhjyznpkmstqrwx', 'p0r21436x8zb9dcf5h7kjnmqesgutwvy' ],\n        w: [ '238967debc01fg45kmstqrwxuvhjyznp', '14365h7k9dcfesgujnmqp0r2twvyx8zb' ],\n    };\n    var border = {\n        n: [ 'prxz',     'bcfguvyz' ],\n        s: [ '028b',     '0145hjnp' ],\n        e: [ 'bcfguvyz', 'prxz'     ],\n        w: [ '0145hjnp', '028b'     ],\n    };\n\n    var lastCh = geohash.slice(-1);    // last character of hash\n    var parent = geohash.slice(0, -1); // hash without last character\n\n    var type = geohash.length % 2;\n\n    // check for edge-cases which don't share common prefix\n    if (border[direction][type].indexOf(lastCh) != -1 && parent !== '') {\n        parent = Geohash.adjacent(parent, direction);\n    }\n\n    // append letter for direction to parent\n    return parent + Geohash.base32.charAt(neighbour[direction][type].indexOf(lastCh));\n};\n\n\n/**\n * Returns all 8 adjacent cells to specified geohash.\n *\n * @param   {string} geohash - Geohash neighbours are required of.\n * @returns {{n,ne,e,se,s,sw,w,nw: string}}\n * @throws  Invalid geohash.\n */\nGeohash.neighbours = function(geohash) {\n    return {\n        'n':  Geohash.adjacent(geohash, 'n'),\n        'ne': Geohash.adjacent(Geohash.adjacent(geohash, 'n'), 'e'),\n        'e':  Geohash.adjacent(geohash, 'e'),\n        'se': Geohash.adjacent(Geohash.adjacent(geohash, 's'), 'e'),\n        's':  Geohash.adjacent(geohash, 's'),\n        'sw': Geohash.adjacent(Geohash.adjacent(geohash, 's'), 'w'),\n        'w':  Geohash.adjacent(geohash, 'w'),\n        'nw': Geohash.adjacent(Geohash.adjacent(geohash, 'n'), 'w'),\n    };\n};\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\nif (typeof module != 'undefined' && module.exports) module.exports = Geohash; // CommonJS, node.js\n"],"sourceRoot":""}